import { useState, useRef, useEffect } from 'react'
import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'

function getDisplaySetCode(card) {
    return card['set_code'] ?? card['set_id'];
}

function maybeProcessGalleryCardNumber(cardNumber) {
    const regex = /(?<=gg)0*/i;
    return cardNumber.replace(regex, '');
}

// The DB has some gaps - manually map a few pokemon
const NAME_TO_POKEDEX_NUMBER_FALLBACK = {
    "Dipplin": 1011,
    "Poltchageist": 1012,
    "Sinistcha": 1013,
    "Okidogi": 1014,
    "Munkidori": 1015,
    "Fezandipiti": 1016,
    "Ogerpon": 1017,
    "Archaludon": 1018,
    "Hydrapple": 1019,
    "Gouging Fire": 1020,
    "Raging Bolt": 1021,
    "Iron Boulder": 1022,
    "Iron Crown": 1023,
    "Terapagos": 1024,
    "Pecharunt": 1025,
}

const TYPE_TO_ENERGY_SYMBOL_URL = {
    'Grass': 'grass-energy-symbol.png',
    'Fire': 'fire-energy-symbol.png',
    'Water': 'water-energy-symbol.png',
    'Lightning': 'lightning-energy-symbol.png',
    'Psychic': 'psychic-energy-symbol.png',
    'Fighting': 'fighting-energy-symbol.png',
    'Darkness': 'darkness-energy-symbol.png',
    'Metal': 'metal-energy-symbol.png',
    'Colorless': 'colorless-energy-symbol.png',
}


function ExportModal({ undeletedCardData, cardDatabase }) {
    const pokemonDict = {};
    const trainerDict = {};
    const energyDict = {};
    undeletedCardData.forEach(({ cardInfo }) => {
        const { supertype, id, name, count } = cardInfo;
        if (supertype === 'Energy') {
            energyDict[name] = (energyDict[name] ?? 0) + count; // key off of name for energies
        } else if (supertype === 'Trainer') {
            trainerDict[name] = (trainerDict[name] ?? 0) + count; // key off of name for trainers
        } else {
            pokemonDict[id] = (pokemonDict[id] ?? 0) + count; // key off of id for pokemon
        }
    });

    const pokemon = Object.keys(pokemonDict).map(id => [id, pokemonDict[id]]);
    const trainers = Object.keys(trainerDict).map(id => [id, trainerDict[id]]);
    const energies = Object.keys(energyDict).map(id => [id, energyDict[id]]);

    [trainers, energies].map(pairList => {
        pairList.sort((a, b) => {
            return (b[1] - a[1]) || a[0].localeCompare(b[0]);
        })
    });

    pokemon.sort((a, b) => {
        const card1 = cardDatabase[a[0]];
        const card2 = cardDatabase[b[0]];
        return (b[1] - a[1]) || card1.name.localeCompare(card2.name);
    });

    const numPokemon = pokemon.reduce((a, b) => a + b[1], 0);
    const numTrainers = trainers.reduce((a, b) => a + b[1], 0);
    const numEnergies = energies.reduce((a, b) => a + b[1], 0);

    const totalCount = numPokemon
        + numTrainers
        + numEnergies;
    const totalCountValid = totalCount === 60;

    const [clipboardButtonText, setClipboardButtonText] = useState('Copy to Clipboard');
    const pokemonText = `Pokemon: ${numPokemon}\n${pokemon.filter(row => row[1] > 0).map(row => {
        const id = row[0];
        const count = row[1];
        const card = cardDatabase[id];
        return `${count} ${card['name']} ${getDisplaySetCode(card)} ${maybeProcessGalleryCardNumber(card['number'])}`
    }).join('\n')}`;
    const trainerText = `Trainer: ${numTrainers}\n${trainers.filter(row => row[1] > 0).map(row => {
        const name = row[0];
        const count = row[1];
        return `${count} ${name}`
    }).join('\n')}`;
    const energyText = `Energy: ${numEnergies}\n${energies.filter(row => row[1] > 0).map(row => {
        const name = row[0];
        const count = row[1];
        return `${count} ${name}`
    }).join('\n')}`;
    const decklistText = [pokemonText, trainerText, energyText].join('\n\n');
    function onCopyToClipboard() {
        navigator.clipboard
            .writeText(
                decklistText
            ).then(() => {
                setClipboardButtonText('Copied!');
                setTimeout(() =>
                    setClipboardButtonText('Copy to Clipboard'), 1000)
            });
    }

    const [playerName, setPlayerName] = useState('');
    const [playerID, setPlayerID] = useState('');
    const [playerDOB, setPlayerDOB] = useState('');
    const [ageDivision, setAgeDivision] = useState('Masters Division');
    const [format, setFormat] = useState('Standard');
    const [deckName, setDeckName] = useState('');


    const emailText = `Player Name: ${playerName}\n
  Player ID: ${playerID}\n
  Date of Birth: ${playerDOB}\n
  Age Division: ${ageDivision}\n
  Format: ${format}\n\n
  
  Decklist:\n
  ${decklistText}\n
  
  Generated by Deb's Dubious Decklist Detector
  `.replaceAll('\n', '%0D%0A');

    const emailLink = `mailto:?to=&body=${emailText}&subject=${playerName}'s Decklist`;

    const isDownloadPDFEnabled = playerName && playerID && playerDOB;

    function onDownloadPDF() {
        const pokemonTable = pokemon.filter(row => row[1] > 0).map(row => {
            const id = row[0];
            const count = row[1];
            const card = cardDatabase[id];
            const nationalPokedexNumber = (card.national_pokedex_numbers ?? [])[0] ?? NAME_TO_POKEDEX_NUMBER_FALLBACK[card.name_without_prefix_and_postfix] ?? 0;
            // const spriteUrl = 'sprites/' + nationalPokedexNumber + '.png';
            // const energySymbolUrl = TYPE_TO_ENERGY_SYMBOL_URL[card.types[0]];
            const nameForSpriteUrl = card.name_without_prefix_and_postfix.toLowerCase().replaceAll(' ', '-').replaceAll(/(\'|\.)/gi, '').replaceAll('é', 'e').replace('♀', 'f').replace('♂', 'm')
            const spriteUrl = 'sprites/' + nameForSpriteUrl + '.png';

            return [count, card['name'], getDisplaySetCode(card), maybeProcessGalleryCardNumber(card['number']), card['regulation_mark'], spriteUrl];
        }).concat([...Array(2)].map(_ => { return ['', '']; })); // add some buffer for writing in changes by hand

        const trainerTable = trainers.filter(row => row[1] > 0).map(row => {
            const name = row[0];
            const count = row[1];
            return [count, name]
        }).concat([...Array(2)].map(_ => { return ['', '']; })); // add some buffer for writing in changes by hand

        const energyTable = energies.filter(row => row[1] > 0).map(row => {
            const name = row[0];
            const count = row[1];
            return [count, name]
        }).concat([...Array(1)].map(_ => { return ['', '']; })); // add some buffer for writing in changes by hand

        const doc = new jsPDF();

        const tableStyles = { cellPadding: 0.2 };
        const columnStyles = { 0: { cellWidth: 16 } };
        const headStyles = { fillColor: '#a9a9a9' };

        doc.setFontSize(13);
        doc.text(`Player Name: ${playerName}`, 15, 10);
        doc.text(`Player ID: ${playerID}`, 15, 15);
        doc.text(`Date of Birth: ${playerDOB}`, 15, 20);
        doc.text(`Age Division: ${ageDivision}`, 15, 25);
        doc.text(`Format: ${format}`, 15, 30);

        const decknameOffset = deckName ? 8 : 0;
        doc.text(deckName, 195.5 - doc.getTextWidth(deckName), decknameOffset);

        doc.setFontSize(8);
        doc.text(`Generated by decklist.debkbanerji.com on ${new Date().toLocaleDateString()}`, 130, 5 + decknameOffset);
        const qrCodeImg = new Image();
        qrCodeImg.src = 'website-qr-code.png';
        doc.addImage(qrCodeImg, 'png', 175, 7 + decknameOffset, 22, 22);

        doc.setFontSize(12);
        doc.text(`Pokemon: ${numPokemon}`, 15, 40);
        autoTable(doc, {
            head: [['QTY', 'NAME', 'SET', 'COLL #', 'REG']],
            body: pokemonTable,
            styles: tableStyles,
            columnStyles,
            headStyles,
            margin: { top: 42 },
            didDrawCell: function (data) {
                try {
                    if (data.column.index === 1 && data.row.section === 'body') {
                        const spriteUrl = pokemonTable[data.row.index][5];
                        const dim = data.cell.height - data.cell.padding('vertical');
                        const textPos = data.cell.textPos;
                        if (spriteUrl != null && spriteUrl.length > 0) {
                            const img = new Image();
                            const imgProps = doc.getImageProperties(spriteUrl);
                            const height = dim;
                            const width = (imgProps.width * height) / imgProps.height;
                            img.src = spriteUrl;
                            doc.addImage(img, 'png', data.cell.x - 6, data.cell.y, width, height);
                        }
                    }
                } catch (e) {
                    // do nothing
                }
            }
        });

        doc.text(`Trainer: ${numTrainers}`, 15, doc.lastAutoTable.finalY + 6);
        autoTable(doc, {
            head: [['QTY', 'NAME']],
            body: trainerTable,
            styles: tableStyles,
            columnStyles,
            headStyles
        });

        doc.text(`Energy: ${numEnergies}`, 15, doc.lastAutoTable.finalY + 6);
        autoTable(doc, {
            head: [['QTY', 'NAME']],
            body: energyTable,
            styles: tableStyles,
            columnStyles,
            headStyles
        })
        doc.save(`${deckName.length > 0 ? deckName.replaceAll(' ', '-').replaceAll('/', '-') + '-' : ''}decklist-${new Date(Date.now()).toLocaleDateString().replaceAll('/', '-')}.pdf`)
    }
    return <div>
        <h2>Export Decklist</h2>
        <hr />
        {totalCountValid ?
            <>
                <div><b className='warning-text'>Ensure the cards and counts are correct before proceeding!</b></div>
                <br />
                <div><b className='error-text'>Especially for Pokémon versions</b></div>
            </> :
            <b>
                <div><b className='error-text'>WARNING: Your decklist doesn't have exactly 60 cards</b></div>
            </b>
        }
        <hr />
        <div>
            <div>
                <button type="button" onClick={onCopyToClipboard}>
                    {clipboardButtonText}
                </button>
            </div>
            <h2>Or</h2>
            <div>
                <div>
                    Player Name: <input type="text" name='player-name' onChange={e => setPlayerName(e.target.value)} value={playerName} />
                </div>
                <div>
                    Player ID: <input type="text" name='player-id' onChange={e => setPlayerID(e.target.value)} value={playerID} />
                </div>
                <div>
                    Date of Birth: <input type="date" name='player-dob' onChange={e => setPlayerDOB(e.target.value)} value={playerDOB} />
                </div>
                <div>
                    Age Division: <select onChange={e => setAgeDivision(e.target.value)} value={ageDivision}>
                        <option>Junior Division</option>
                        <option>Senior Division</option>
                        <option>Masters Division</option>
                    </select>
                </div>
                <div>
                    Format: <select onChange={e => setFormat(e.target.value)} value={format}>
                        <option>Standard</option>
                        <option>Expanded</option>
                    </select>
                </div>
                <div>
                    Deck Name (Optional): <input type="text" name='deck-name' onChange={e => setDeckName(e.target.value)} value={deckName} />
                </div>
                <br />
                <button type="button" onClick={onDownloadPDF} disabled={!(playerName && playerID && playerDOB)}>
                    Download PDF
                </button>
            </div>
            <h2>Or</h2>
            <a href={emailLink} target="_blank"><button type="button" disabled={!(playerName && playerID && playerDOB)}>
                Email Decklist
            </button></a>
        </div>
    </div >;
}

export default ExportModal;
